In this project, a similar food quality monitoring device will be designed that will keep watch of environmental factors like temperature, humidity,
alcohol content and exposure to light. The device is built on Arduino UNO which is a popular prototyping board. The Arduino board is interfaced with
various sensors like DHT-11 to monitor temperature and humidity, MQ3 to detect alcohol content and LDR to measure exposure to light. 
This is an IoT device and sends the measured sensor data to an IoT platform. The ESP8266 Wi-Fi Modem is interfaced with the Arduino to connect it to the internet via Wi-Fi router.
The sensor data is also displayed on a character LCD interfaced with the Arduino UNO. The IoT platform used for logging and monitoring of sensor data is Freeboard.io. With the power of Internet of Things,
the environmental factors affecting the food storage can be monitored from anywhere, anytime and from any device. 
 
Many such devices can be installed at a location for better monitoring and quality control. The Arduino Sketch running over the device implements the various functionalities of the project like reading sensor data, 
converting them into strings. The Sketch is written, compiled and loaded using the Arduino IDE.  
 
Prototype of Arduino Based Smart IoT Food Quality Monitoring System
 
Fig. 1: Prototype of Arduino Based Smart IoT Food Quality Monitoring System
source code:
           Programs For Food Spoilage Detection System  
                                                        
                                                   Arduino Program

#include <SoftwareSerial.h>

SoftwareSerial nodemcu(8, 9);


int pinRedLed = 12;
int pinGreenLed = 11;
int pinSensor = A5;
int THRESHOLD = 250;
int buzzer = 10;

 

int rdata = 0; 
String mystring; 
void setup()
{
Serial.begin(9600); 
nodemcu.begin(9600); 


pinMode(buzzer, OUTPUT);
pinMode(pinRedLed, OUTPUT);
pinMode(pinGreenLed, OUTPUT);
pinMode(pinSensor, INPUT);



}

void loop()
{

    // put your main code here, to run repeatedly:

int rdata  =  analogRead(pinSensor);


Serial.print("Methane Range: ");
Serial.println(rdata);

if(rdata >= THRESHOLD){
   digitalWrite(pinRedLed, HIGH);
   digitalWrite(pinGreenLed, LOW);
   digitalWrite(buzzer, HIGH);  
  
   delay(50);
 
}else
  {
    digitalWrite(pinRedLed, LOW);
    digitalWrite(pinGreenLed, HIGH);
    digitalWrite(buzzer, LOW);
   
  }
  
  if (nodemcu.available() > 0)
  {
  char data; 
 data = nodemcu.read(); 
  Serial.println(data); 
  }
  if(rdata < 250){
  mystring = mystring + "Methane Range: " + rdata; 
  nodemcu.println(mystring);
  Serial.println(mystring); 
  
  }else
{
    mystring = "Food Spoiled";
    nodemcu.println(mystring);
    Serial.println(mystring); 
  
  }

 mystring = ""; 
delay(1000); 
 
}



                            NodeMcu Program

#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <SoftwareSerial.h>



String sdata; 
char auth[] = "kvBuZuwcA_JGDj0DBMBlgXfqfe9-B_Lr";

// Your WIFI credentials.
// Set password to "" for open networks.
char ssid[] = "vivo 1814";
char pass[] = "priyateli2831";

BlynkTimer timer;

String  myString; // complete message from Arduino, which consists of sensors data
char rdata; // received characters


// This function sends Arduino's up time every second to Virtual Pin (1).
// In the app, Widget's reading frequency should be set to PUSH. This means
// that you define how often to send data to Blynk App.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V1, millis() / 1000);
  
}



void setup()
{
  // Debug console
  Serial.begin(9600);

  Blynk.begin(auth, ssid, pass);

  timer.setInterval(1000L, sensorvalue1); 

}

void loop()
{
   if (Serial.available() == 0) 
   {
  Blynk.run();
  timer.run(); // Initiates BlynkTimer

   }
   
  if (Serial.available() > 0) 
  {
    rdata = Serial.read(); 
    myString = myString + rdata; 
  
  }

}

void sensorvalue1()
{
sdata = myString ;
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V12, sdata);
   myString = "";
}
